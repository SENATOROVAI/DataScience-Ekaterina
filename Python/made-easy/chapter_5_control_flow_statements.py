# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     notebook_metadata_filter: -kernelspec
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.16.4
# ---

# %%
"""Операторы управления потоком."""

# %% [markdown]
# 5.1. Управление потоком
# Чтобы программа выполняла разные действия в зависимости
# от тех или иных обстоятельств для этого нужны операторы
# управления потоком.
#

# %% [markdown]
# ![image.png](attachment:image.png)

# %% [markdown]
# 5.2. Операторы if
# 5.2.1. Простой оператор if
# Оператор if используется для проверки условия и, если условие истинно,
# выполняется связанный с оператором блок кода (называемый блоком if).
# Синтаксис: ключевое слово if, условие и двоеточие. Блок кода оператора if
# начинается со следующей строки и должен иметь отступ. Отступ сообщает
# Python о том, что этот блок кода предназначен для оператора if.
#
# if условие:
# 			код блока if
#
# конец блока if
#
# Строка конец блока if не пишется, блок оператора заканчивается сам по себе. Это
# будет видно в приведенном далее примере. Объясню с помощью блок-схемы, как
# меняется выполнение кода (рис. 5.2).

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
alfa: int = 8
beta: int = 5
if alfa > beta:
    print(f"{alfa} больше {beta}")

# %%
if alfa < beta:
    print(f"{alfa} меньше {beta}")

# %% [markdown]
# Поскольку условие if не было выполнено, блок кода if тоже не выполнился,
# и программа завершилась сама собой.
# Давайте рассмотрим, как с помощью оператора if решить реальную проблему.
# Реальная ситуация: перед праздником в торговом центре объявили распродажу.
# При покупке электронных товаров вам предлагается скидка 20% при условии, что
# сумма покупки превышает 50 000. Клиент покупает некоторое количество товаров,
# суммарная стоимость купленных товаров вводится с клавиатуры. Нужно написать
# программу для вычисления суммы, подлежащей оплате.

# %%
purchases = int(input("Oбщaя сумма nокуnаемых товаров : "))
discount: int = 0
if purchases > 50000:
    discount = int((purchases * 20) / 100)
bill_amount: int = purchases - discount
print(f"Итоговая сумма к оплате: {bill_amount}, скидка составила: {discount}")

# %% [markdown]
# 5.2.2. Оператор if-else
# В большинстве случаев бывает нужно что-то сделать, если условие if не
# выполнилось, т. е. оказалось ложно. Для этого у нас есть оператор
# if-else (рис.5.3).

# %% [markdown]
# ![image.png](attachment:image.png)

# %% [markdown]
# Как и ранее, оператор if проверяет условие: если условие истинно, запускается
# блок if, в противном случае выполняется другой блок операторов (называемый
# блоком else). При этом блок else не является обязательным.
# if условие :
# 			код блока if
# else:
# 			код блока else
# Синтаксис: ключевое слово if, условие и двоеточие. Блок if начинается со сле
# дующей строки и должен иметь отступ. Отступ сообщает Python о том, что этот
# блок кода предназначен для оператора if. Затем идет ключевое слово else на новой
# строке без отступа, за ним следует двоеточие. Блок кода оператора else начинается
# со следующей строки с отступом. Отступ сообщает Python о том, что этот блок
# кода предназначен для оператора else.

# %%
number = int(input("Enter a number:"))
if number > 11:
    print(f"{number} is greater than 11")
elif number == 11:
    print(f"{number} is equal 11")
else:
    print(f"{number} is smaller than 11")

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
some_num = int(input("Please enter an integer: "))
if some_num < 0:
    print("Negative Number")
elif some_num == 0:
    print("Zero")
elif some_num == 1:
    print("Single")
else:
    print("More")

# %% [markdown]
# Блоков elif может быть сколько угодно (или их может не быть вовсе), а блок
# else необязателен. Ключевое слово elif является сокращением от else if и
# позволяет избежать кода с огромными отступами.
# Давайте посмотрим, как использовать оператор if-elif для решения реальной
# за дачи.

# %% [markdown]
# Реальная ситуация: перед праздником в торговом центре объявили распродажу.
# При покупке одежды и модных аксессуаров вам предлагается скидка 20% при
# условии, что сумма покупки превышает 25 ООО, в противном случае скидка состав
# ляет 5%. Клиент покупает некоторое количество товаров, суммарная стоимость
# купленных товаров вводится с клавиатуры. Напишите программу для вычисления
# суммы, подлежащей оплате.
# Решение:

# %%
purchases = int(input("Общaя сумма покупаемой одежды и аксессуаров:"))
if purchases > 25000:
    discount = int((purchases * 20) / 100)
else:
    discount = int((purchases * 5) / 100)
bill_amount = purchases - discount
print(f"Итоговая сумма к оплате:{bill_amount} , скидка составила: {discount} ")

# %% [markdown]
# Реальная ситуация: в компании работают люди со всей страны. Отдел кадров
# классифицирует города по количеству населения на 3 категории: А, В и С. Размер
# компенсации аренды жилья зависит от класса города по следующим правилам: для
# города класса А - 3 0% от базовой заработной платы, для города класса В - 20%
# от базовой заработной платы, для города класса С - 1 0% от базовой заработной
# платы.
# Базовая зарплата и класс города сотрудника вводятся с клавиатуры. Рассчитайте
# сумму компенсации, подлежащую выплате сотруднику.
# Решение:

# %%
name: str = "Нилаб"
HRA: float = 1.0
basic_salary = int(input(f"Зapплaтa сотрудника {name} составляет: "))
city_class: str = input(f"{name} живет в городе класса: ")
if city_class == ("a" or "A"):
    HRA = (basic_salary * 30) / 100
elif city_class == ("b" or "B"):
    HRA = (basic_salary * 20) / 100
elif city_class == ("c" or "C"):
    HRA = (basic_salary * 10) / 100
print(f"Компенсация за аренду жилья для {name} составит: {HRA} ")

# %% [markdown]
# 5.3. Оператор цикла for
# Циклы в программировании используются для многократного выполнения опреде
# ленного блока кода. Цикл for в Python выполняет итерацию по элементам
# переданной последовательности (списка или строки) в том порядке, в котором
# они в этой последовательности представлены (рис. 5.5). (Термин «итерация»
# означает повторение процесса.)

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
# работа со списком строк
words: list[str] = ["cat", "window", "defenestrate"]
for one_word in words:
    print(one_word, len(one_word))

# %% [markdown]
# Нельзя не отметить простоту оператора for. Мы указываем переменную, которую
# хотим использовать (w или i в приведенных примерах), а затем используем опера-
# тор in, чтобы связать переменную с последовательностью, которую мы хотим пере-
# брать (здесь words - это наш список, т. е. последовательность).
# Обобщенно синтаксис выглядит следующим образом:
# for переменная in последовательность :
# код блок for
# Этот синтаксис похож на описание на английском языке и переводится как «для
# [каждого] значения, в списке». Это одна из тех синтаксических конструкций,
# которые приближают Python к разговорному языку.

# %% [markdown]
# 5.3.1 . Цикл for с блоком else
# В цикле for также может быть необязательный блок else. Блок else выполняется,
# когда элементы в последовательности, перебираемой циклом for, заканчиваются
# (рис. 5.6).

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
num_list: list[int] = [1, 2, 3, 4, 5]
for i_num in num_list:
    if i_num < len(num_list):
        print(i_num)

print("this is end of the code!")

# %% [markdown]
# 5.4. Функция range()
# Если вам необходимо перебрать простую последовательность чисел, поможет
# встроенная функция range ( ) . Она генерирует арифметическую прогрессию.

# %%
for my_num in range(5):
    print(my_num)

# %% [markdown]
# При этом последняя точка никогда не является частью сгенерированной последова
# тельности, например функция range(10) генерирует 10 значений, представляющих
# собой допустимые индексы элементов последовательности длиной 10. Диапазон
# может начинаться с любого числа или иметь произвольный шаг (даже отрицатель-
# ный), если это указать явно в параметрах функции.

# %% [markdown]
# Зачастую объект, возвращаемый функцией range(), ведет себя очень похоже на
# список, но это не так.
# Это объект, который поочередно возвращает элементы переданной ему последова-
# тельности, когда вы перебираете его, но при этом сам список не создается,
# экономя память.
# Подобрые объекты называются итерируемыми, т.е. их можно обрабатывать с по-
# мощью функций и конструкций, которые ожидают получить тип данных, у
# которого можно перебрать элементы, пока они не закончатся.
# Мы видели, что оператор for именно так и работает. Есть еще одна функция
# list(), которая создает списки из итерируемого объекта.

# %% [markdown]
# 5.5. Цикл while
# Цикл while используется для перебора блока кода, пока выполняется заданное
# условие (рис. 5.7). Цикл while обычно используется в тех случаях, когда
# мы не знаем, сколько раз придется выполнить цикл.

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
number1: int = 10
# присвоение значений переменным
summ: int = 0
i_num1: int = 1
while i_num1 <= number1:
    summ += i_num1
    i_num1 += 1  # обновление счетчика
print("The sum is", summ)

# %% [markdown]
# В приведенном примере цикл будет выполняться до тех пор, пока условие while
# возвращает True. Когда цикл закончится, программа перейдет к следующему выра-
# жению - print().
# Значение переменной счетчика необходимо увеличивать в теле цикла. Это очень
# важно (и об этом часто забывают). В противном случае возникнет бесконечный
# цикл.
# Подобно циклу for, у цикла while тоже может быть блок else, и используется
# он таким же образом.

# %% [markdown]
# 5.6. Операторы break и continue
# 5.6. 1 . Оператор break1
# Оператор break прерывает выполнение самого внутреннего цикла for или while.
# Операторы цикла могут иметь блок else, который выполняется, когда цикл завер-
# шается, перебрав все элементы (в случае цикла for) или когда условие становится
# ложным (в случае цикла while). Обратите внимание, что блок else не выполняется,
# когда цикл завершается оператором break (рис. 5.8).
# Для лучшего сравнения рассмотрим тот же пример с оператором else. Но на этот
# раз в цикле for используем оператор break. Обратите внимание, как меняется
# результат.

# %%
numbers2: list[int] = [1, 2, 3, 4, 5]
for i_num2 in numbers2:
    if i_num2 < len(numbers2):
        print(i_num2)
        break
else:
    print(" this is end of the code !")
print("this line is outside the loop")

# %% [markdown]
# Вы заметили, что вместо 5 строк вывода, которые ранее печатал тот же цикл без
# оператора break, теперь выводится только одна строка в цикле? Дело в том, что
# оператор break остановил цикл for и не перевел его на следующую итерацию и про
# пустил блок else.

# %% [markdown]
# ![image.png](attachment:image.png)

# %% [markdown]
# Разберем еще один пример, который позволит лучше понять циклы и операторы
# break. На этот раз рассмотрим вложенный цикл. У нас будут внешний и
# вложенный циклы.
# В качестве примера возьмем цикл, который ищет простые числа:

# %%
for number3 in range(2, 10):
    for ex in range(2, number3):
        if number3 % ex == 0:
            print(number3, "equals", ex, "*", number3 // ex)
            break
    else:
        # цикл прерывается, не найдя делителя
        print(number3, "is a prime number ")

# %% [markdown]
# 5.6.2. Оператор continue
# Оператор continue используется для пропуска части кода внутри цикла в пределах
# текущей итерации (рис. 5.9). Цикл не завершается, а сразу перейдет на следующую
# итерацию

# %% [markdown]
# ![image.png](attachment:image.png)

# %% [markdown]
# Оператор continue продолжает выполнение кода со следующей итерации цикла:

# %%
for alphabet in "python":
    if alphabet == "t":
        continue
    print(alphabet)
print("The end")

# %%
for num in range(2, 10):
    if num % 2 == 0:  # четное число
        print("Found an even number", num)
        continue
    print("Found a number", num)

# %% [markdown]
# 5. 7. Оператор pass1
# Оператор pass ничего не делает. Его можно использовать, когда в данном месте
# программы оператор синтаксически требуется, но никаких действий в этом месте
# выполнять не нужно.
# Обычно он используется для создания минимальных классов:
# class MyEmptyClass:
# 			pass
# Еще его можно использовать в качестве заполнителя для функции или тела условия
# в момент написания нового кода. Эrо позволяет сначала набросать шаблон кода на
# более абстрактном уровне. Интерпретатором этот оператор просто игнорируется:

# %% [markdown]
# def initlog(*args: str) -> None:  # не забудьте реализовать это!
#     """Generate logs."""
#     pass

# %% [markdown]
# 5.6. Резюме
# 1. Изучила как можно управлять потоком кода.
# 2. Поняла, что без операторов if или циклов код может выполняться только
# сверху вниз, построчно и в неизменном порядке.
# 3. Область действия оператора if поумолчанию включает в себя блок кода,
# следующий
# за оператором if и записанный с отступом.
# 4. У всех строк должен быть одинаковый отступ после оператора if.
# 5. Блок if может иметь, а может и не иметь блок else.
# 6. В Python существуют два типа циклов: for и while.
# 7. Оператор break прерывает выполнение цикла.
# 8. Оператор continue пропускает выполнение следующих за ним выражений в
# цикле и начинает новую итерацию цикла.

# %% [markdown]
# 5.7.1 . Ответьте на вопросы
# 1. Каков порядок выполнения выражений в программе Python? Как его изменить?
# Ответ:
# Порядок выполнения вырожений - только сверху вниз построчно. Можно изменить
# с пощью операторов if, elif, else, а также break & continiues
#
# 2. Что делают приведенные фрагменты кода?
# а)
# alfa = 50
# if alfa >= 100:
#     print(f"Value of a is {alfa}")
# Ответ:
# Код ничего не выводит, так как значение переменной не попадает в блок if
#
# б)
# alfa = 90
# if alfa <= 100:
#     print(f"Value of a is {alfa}")
# Ответ:
# Код выведет "Value of а is 90"
#
# в)
# ex = 50
# if ex >= 10:
#     print(f"Value of x is {ex}")
# else:
#     print("Value of x is less than 10")
# Ответ:
# Код выведет "Value of х is 50"
#
# г)
# ex = 5
# if ex >= 10:
#     print("Value of x is {ex}")
# else:
#     print("Value of x is less than 10")
# Ответ:
# Код выведет "Value of x is less than 10"
#
# д)
# ex = 0
# while ex < 5:
#     print(ex)
#     ex += 1
# Ответ:
# Код выведет
# 0
# 1
# 2
# 3
# 4
#
# е)
# for item in range(5, 25, 5):
#     print(item)
# Ответ:
# Код выведет
# 5
# 10
# 15
# 20
#
# 3. Есть ли ошибки в приведенных фрагментах? Если да, то какие.
# а)
# alfa = 12
# if alfa == 10:
#     print("a is equal to 10")
#
# Пропущено двоеточие после if а == 10
#
# б)
# alfa, beta = 90, 15
# if alfa <= 100:
#     print("Value of a is less than 100")
# а = 90, b = 15 - неправильно написаны переменные
# a = 90
# b = 15
#
# в)
# ex = 22
# if ex >= 10:
#     print("ex is bigger than 10")
# else:
#     print("ex is less than 10")
# Пропущено двоеточие после else
#
# г)
# ex = 5
# if ex >= 10:
#     print("Value of ex is {ex}")
# else:
#     print("Value of x is less than 10")
# После else не пишутся условия
#
# д)
# ex = 5
# if ex > 10:
#     print("Value of ex is more than 10")
# elif ex == 10:
#     print("Value of ex is equal to 10")
# else:
#     print("Value of ex is less than 10")
#
# Сначала идет блок if потом elif и в конце else
#
# е)
# ex = 0
# while ex < 5:
#     print(ex)
#     ex += 1
# Пропущено двоеточие после while х < 5

# %% [markdown]
# 5.7.2. Правда ил и ложь
# 1. Когда оператор if имеет значение Тrue, он выполняет лишь одну инструкцию
# в коде.
# Ложь
# 2. Блок кода сразу после оператора if - это блок if, который выполняется,
# когда условие возвращает True.
# Правда
# 3. Оператор else обязательно есть после каждого оператора if.
# Ложь
# 4. Оператор elif представляет собой комбинацию операторов else и if в одной
# строке.
# Правда
# 5 . Оператор else также может использоваться с циклом for.
# Правда
# 6. Объект в теле цикла for должен быть объектом-итератором.
# Правда
# 7. Цикл while выполняет блок кода, пока выполняется условие.
# Правда
# 8. Оператор break прерывает самый внутренний цикл for.
# Правда
# 9. Оператор continue используется для пропуска всех оставшихся итераций
# цикла.
# Ложь
# 10. Оператор pass ничего не делает.
# Правда

# %% [markdown]
# 1. Трейдер хочет, чтобы программа проверяла, получил ли он прибыль или убы-
# ток по сделке. Напишите программу, в которой с клавиатуры вводится цена по-
# купки и продажи, а в ответ программа сообщает, получил ли трейдер прибыль
# или убыток. Программа также должна рассчитать сумму прибыли или убытка.
#

# %%
purchase_price = int(input("Введите стоимость покупки товара: "))
sale_price = int(input("Введите стоимость продажи товара: "))
difference: int = purchase_price - sale_price
if difference > 0:
    print(f"Трейдер получил прибыль в размере {difference}.")
else:
    print(f"Трейдер получил убыток в размере {difference}.")

# %% [markdown]
# 2. Напишите программу, которая проверяет, является ли год, введенный с
# клавиатуры, високосным.

# %%
year = int(input("Введите год: "))
if year % 4 == 0:
    print("Год високосный")
else:
    print("Год не високосный")

# %% [markdown]
# 3. Трое сотрудников Самир, Правин и Мохит, вводят свой опыт работы с клавиа-
# туры. Напишите программу, которая определяет наиболее и наименее опытного
# из них.

# %%
Samir = int(input("Введите опыт работы Самира: "))
Pravin = int(input("Введите опыт работы Правина: "))
Mohit = int(input("Введите опыт работы Мохита: "))

most_experienced = max(Samir, Pravin, Mohit)
least_experienced = min(Samir, Pravin, Mohit)

if Samir == most_experienced:
    print("Наиболее опытным сотрудником является Самир")
elif Samir == least_experienced:
    print("Наименее опытным сотрудником является Самир")
if Pravin == most_experienced:
    print("Наиболее опытным сотрудником является Правин")
elif Pravin == least_experienced:
    print("Наименее опытным сотрудником является Правин")
if Mohit == most_experienced:
    print("Наиболее опытным сотрудником является Мохит")
elif Mohit == least_experienced:
    print("Наименее опытным сотрудником является Мохит")

# %% [markdown]
# 4. Сумма трех углов треугольника составляет 180°. Напишите программу, которая
# проверяет, является ли фигура треугольником, если в качестве входных данных
# вводятся три угла.
#

# %%
angle_1 = int(input("Угл первый: "))
angle_2 = int(input("Угл второй: "))
angle_3 = int(input("Угл третий: "))

if angle_1 + angle_2 + angle_3 == 180:
    print("Фигура - треугольник")
else:
    print("Фигура - не треугольник")

# %% [markdown]
# 5. Даны три угла треугольника. Напишите программу, которая проверит,
# является ли он прямоугольным ( один из углов должен составлять 90°).

# %%
angle_1 = int(input("Угл первый: "))
angle_2 = int(input("Угл второй: "))
angle_3 = int(input("Угл третий: "))

if angle_1 + angle_2 + angle_3 == 180:
    if angle_1 == 90 or angle_2 == 90 or angle_3 == 90:
        print("Треугольник прямоугольный")
    elif angle_1 != 90 or angle_2 != 90 or angle_3 != 90:
        print("Треугольник не прямоугольный")
else:
    print("Фигура - не треугольник")

# %% [markdown]
#
# 6. Сколько разных трехзначных чисел можно получить, используя цифры 1, 2 и 3
# в разных позициях? Напишите программу для генерации всех таких чисел (под
# сказка: используйте цикл for).
#

# %%
count: int = 0

for i_num5 in range(1, 4):
    for j_num5 in range(1, 4):
        for k_num5 in range(1, 4):
            if i_num5 != j_num5 and j_num5 != k_num5 and i_num5 != k_num5:
                number = i_num5 * 100 + j_num5 * 10 + k_num5
                print(number)
                count += 1
print(f"Количество трехзначных чисел: {count}")

# %% [markdown]
# 7. Напишите код для вывода таблицы умножения любого заданного числа.

# %%
number = int(input("Введите число: "))

for i_num6 in range(1, 11):
    print(f"{number} * {i_num6} = {number * i_num6}")

# %% [markdown]
# 8. Напишите программу для вывода всех простых чисел от 1 до 500.

# %%
dev: int = 0
for i_num4 in range(1, 501):
    for j_num in range(2, i_num4):
        if i_num4 % j_num == 0:
            dev += 1
    if dev == 0:
        print(i_num4)
    else:
        dev = 0

# %% [markdown]
# 9. Выведите все числа, кратные 9, которые меньше 300 (подсказка: вы можете
# использовать функцию range()).

# %%
for i_num7 in range(1, 301):
    if i_num7 % 9 == 0:
        print(i_num7)

# %% [markdown]
# 10. Машина в течение срока службы приносит годовой доход в размере
# 200 ООО руб.
# Сама она стоит 1 ООО ООО руб. в момент покупки и продается за 250 ООО руб.
# при утилизации. Вложив ту же сумму в другие инвестиционные инструменты,
# можно заработать 8 % годовых. Каков минимальный срок службы машины, при
# котором она станет более привлекательной по сравнению с альтернативными
# инвестициями?

# %%
profit: int = 200000
purchase_price1: int = 1000000
sale_price1: int = 250000

difference = purchase_price1 - sale_price1
payback_period = round(difference / profit)
print(payback_period, "года")
