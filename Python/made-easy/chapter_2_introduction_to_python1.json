{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Introduction to Python.\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Что такое Python?\n",
    "\n",
    "Python - это бесплатный интерпретируемый высокоуровневый язык\n",
    "программирования общего назначения с открытым исходным кодом.\n",
    "Python был создан Гвидо ван Россумом и впервые выпущен в 1991 r. \n",
    "Он поддерживает несколько парадигм программирования, включая структурное \n",
    "(особенно процедурное) объектно-ориентированное и функциональное программирование.\n",
    "Его языковые конструкции и объектно-ориентированный подход позволяют \n",
    "программистам писать понятный и логичный код в рамках как небольших, так и крупно\n",
    "масштабных проектов.\n",
    "Python - это простой в освоении и очень мощный язык программирования. \n",
    "Элегантный синтаксис и динамическая типизация Python вместе с его\n",
    "интерпретируемостью делают его идеальным языком для написания сценариев и\n",
    "быстрой разработки приложений во многих областях и на множестве платформ.\n",
    "\n",
    "Самыми популярными языками программирования\n",
    "для специалистов по данным являются:\n",
    "1. Python \n",
    "2. С++\n",
    "3. R \n",
    "4. Java\n",
    "5. SQL \n",
    "6. Matlab\n",
    "Преимущества Python:\n",
    "♦ Это один из самых популярных языков программирования, прочно вошедший\n",
    "в индустрию разработки программного обеспечения.\n",
    "♦ Занимает первое место среди языков-аналогов согласно рейтингам из открытых\n",
    "источников или статей по языкам программирования.\n",
    "♦ Стабильно популярный, а еще лучше с растущей популярностью.\n",
    "♦ У языка есть большой набор библиотек, инструменты, фреймворки и большое\n",
    "сообщество, которое вносит свой вклад в развитие языка.\n",
    "♦ Язык хорошо востребован на рынке труда и позволяет получать хорошую зар-\n",
    "плату.\n",
    "Кроме того, Python гибок в настройке и может быть расширен\n",
    "на другие платформы. В автономном виде это довольно мощный язык для решения\n",
    "множества задач. У Python открытый исходный код, и он широко используется.\n",
    "Модули и библиотеки находятся в свободном доступе, и их число растет с каждым\n",
    "днем.\n",
    "Python также очень хорошо приспособлен для решения задач интеллектуального\n",
    "анализа данных, аналитики данных и машинного обучения. Возможности языка\n",
    "программирования в сочетании с модулями анализа данных делают его мощным\n",
    "оружием в арсенале любого аналитика.\n",
    "\n",
    "2. Появление Python\n",
    "Язык Python был придуман в конце 1980-х rr. Гвидо ван Россумом, сотрудником\n",
    "Centrum Wiskunde & Infonnatica (CWI) в Нидерландах, как преемник языка АВС.\n",
    "Его реализация началась в декабре 1989 г. Ван Россум был ведущим разработчиком\n",
    "Python до 1 2 июля 20 1 8 г., после чего ушел в «отпуск на неопределенный срок» и\n",
    "16 октября 2000 r. был выпущен Python 2.0, в котором появилось множество новых\n",
    "базовых функций, включая сборщик мусора с обнаружением циклических ссылок и\n",
    "поддержку Unicode.\n",
    "3 декабря 2008 r. был выпущен Python 3 .0. Это была сильно измененная версия\n",
    "языка, не имеющая полной обратной совместимости. \n",
    "Кстати, язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»\n",
    "(Monty Python's Flying Circus) и со змеями никак не связан. Ссылки на скетчи \n",
    "Монти Пайтона в документации не только разрешены, но и приветствуются! \n",
    "\n",
    "3. Python и другие языки программирования\n",
    "Python проще в использовании, доступен в операционных системах Windows, MacOS и\n",
    "UNIX и позволяет выполнить работу быстрее.\n",
    "Python прост в использовании, но при этом это настоящий язык программирования,\n",
    "в котором есть гораздо более мощный инструментарий для создания больших программ, \n",
    "чем могут предложить shell-скрипты или Ьаt-файлы. С другой стороны, \n",
    "в Python также реализовано больше проверок ошибок, чем в С, и, как в любом языке\n",
    "высокого уровня, в нем есть встроенные высокоуровневые типы данных, такие как \n",
    "гибкие массивы и словари. \n",
    "Python позволяет разделять программу на модули, которые можно повторно\n",
    "использовать в других программах на Python. В нем есть большой встроенный набор\n",
    "стандартных модулей, которые можно использовать в качестве основы для своих\n",
    "программ или в качестве примеров для начала обучения программированию на\n",
    "Python. В этих модулях реализован файловый ввод-вывод, системные вызовы, сокеты,\n",
    "а также инструменты для создания графических пользовательских интерфейсов,\n",
    "такие как Tkinter.\n",
    "Python - это интерпретируемый язык, позволяющий значительно сэкономить время.\n",
    "Интерпретатор можно использовать в интерактивном режиме, что позволяет легко\n",
    "экспериментировать с функциями языка, писать одноразовые программы или\n",
    "тестировать функции во время нисходящей разработки программы.\n",
    "А еще это удобный настольный калькулятор.\n",
    "Python позволяет писать программы компактно и читабельно. Программы, написанные \n",
    "на Python, обычно намного короче таких же программ на С, С++ или Java\n",
    "по нескольким причинам.\n",
    "♦ Типы данных высокого уровня позволяют записывать сложные операции в одну\n",
    "строку.\n",
    "♦ Группировка операторов выполняется с помощью отступов, а не с помощью\n",
    "скобок в начале и конце блока.\n",
    "♦ Объявление переменных или аргументов не требуется.\n",
    "Python является расширяемым: если вы знаете язык С, то можете добавить в \n",
    "интерпретатор новую встроенную функцию или модуль, который бы выполнял важные\n",
    "с точки зрения производительности части кода с максимальной скоростью или\n",
    "связывал программы на Python с библиотеками, доступными в двоичной форме\n",
    "(например, графическими библиотеками конкретного производителя). После \n",
    "подключения вы можете связать интерпретатор Python с приложением, написанным на\n",
    "С, и использовать его как расширение или командный язык для этого приложения.\n",
    "\n",
    "Основная философия языка кратко изложена в документе Zen of Python1 , в котором\n",
    "можно найти такие афоризмы, как:\n",
    "♦ Красивое лучше, чем уродливое.\n",
    "♦ Явное лучше, чем неявное.\n",
    "♦ Простое лучше, чем сложное.\n",
    "♦ Сложное лучше, чем запутанное.\n",
    "♦ Читаемость имеет значение.\n",
    "\n",
    "4. Преимущества Python по сравнению с другими языками\n",
    "4.1 . Простота\n",
    "Python по простоте напоминает «дисциплинированный английский». То есть это не\n",
    "какой-то чужеродный язык, который нормальный человек не может понять. Но в то\n",
    "же время для его применения требуется некоторая дисциплина. Чтение кода на\n",
    "Python похоже на чтение на английском. Простота - одна из основных сильных\n",
    "сторон Python. Это позволяет нам больше сосредоточиться на решении, а не на\n",
    "синтаксисе языка программирования. \n",
    "4.2. Свободный и открытый исходный код\n",
    "Python распространяется бесплатно. Как мы увидим в процессе загрузки и \n",
    "установки Python, все делается совершенно бесплатно. И не будет никаких скрытых \n",
    "платежей за использование или распространение вашей работы.\n",
    "Python распространяется по модели FLOSS (Free/Libre and Open Source Software).\n",
    "Проще говоря, вы можете открыто распространять дубликаты этого продукта, читать\n",
    "его исходный код, вносить в него изменения и использовать его в бесплатных\n",
    "проектах. Есть целое сообщество FLOSS, которое взаимодействует между собой и\n",
    "обменивается информацией. Это одна из причин, почему Python нам подходит, -\n",
    "этот язык был создан и постоянно совершенствуется сообществом, которое желает\n",
    "сделать его как можно лучше.\n",
    "4.3. Высокоуровневость\n",
    "Язык программирования высокого уровня - это язык, в котором вам не приходится\n",
    "думать о множестве деталей, которые нужны при использовании языка \n",
    "программирования низкого уровня. Например, в Python не приходится беспокоиться\n",
    "об управлении памятью, используемой вашей программой. Проще говоря, языки\n",
    "низкого уровня ближе к аппаратному обеспечению, чем языки программирования\n",
    "высокого уровня, которые ближе к человеческим языкам.\n",
    "4.4. Портативность\n",
    "Портативность означает, что Python можно использовать на разных типах машин,\n",
    "независимо от аппаратных средств или ограничений операционной системы. \n",
    "Благодаря открытому исходному коду Python был перенесен на многие платформы,\n",
    "и его можно использовать в Windows, GNU/Linux, Macintosh, Solaris, Palm OS,\n",
    "PlayStation, Sharp Zaurus, Windows СЕ и PocketPC !\n",
    "4.5. Интерпретируемость\n",
    "Когда вы пишете программу на языке С или С++, она преобразуется из исходного\n",
    "языка, т. е. из кода на С или С++, в машинный код (состоящий из О и 1 ), \n",
    "потому что именно такой язык понимает компьютер. Этот процесс выполняется \n",
    "с помощью компилятора. Когда программа запускается, программное обеспечение\n",
    "компоновщика копирует программу в память и запускает ее.\n",
    "Python не требует компиляции в двоичный код, а ваша программа запускается \n",
    "прямо из исходного кода. Внутри Python преобразует исходный код в\n",
    "промежуточную форму, называемую байт-кодами, затем переводит ее на родной\n",
    "язык компьютера и запускает.\n",
    "Python - это самый быстроразвивающийся язык программирования в 2020 году,\n",
    "поэтому недостатка в интерпретаторах у него нет. \n",
    "4.5.1. Интерпретаторы Python \n",
    "Что такое интерпретатор?\n",
    "По определению интерпретатор - это разновидность компьютерной программы,\n",
    "которая непосредственно выполняет инструкции, написанные на каком-либо языке\n",
    "программирования или языке сценариев. Под непосредственным выполнением\n",
    "подразумевается, что предварительная компиляция кода в программу на машинном\n",
    "языке не требуется.\n",
    "Когда вы устанавливаете Python, с ним также устанавливается интерпретатор\n",
    "по умолчанию. Вы можете запустить интерпретатор по умолчанию, набрав команду \n",
    "python в командной строке вашего компьютера. После загрузки интерпретатора\n",
    "код на Python можно выполнять в командной строке. Этот интерпретатор \n",
    "используется по умолчанию, но у него есть свои ограничения. Например, в \n",
    "нем нет отступов, выделения синтаксиса цветом, дополнения табуляции и\n",
    "многого другого, что есть в других интерпретаторах.\n",
    "IPython - это альтернативный интерпретатор Python. Это интерактивная оболочка,\n",
    "которая используется для вычислений на Python. В ней гораздо больше полезных\n",
    "функций по сравнению с интерпретатором Python, используемым по умолчанию.\n",
    "В комплекте с IPython идет редактор Jupyter Notebook - один из наиболее часто\n",
    "используемых начинающими программистами инструментов.\n",
    "CPython\n",
    "Это стандартная и наиболее широко используемая реализация языка программирования\n",
    "Python. Написанный на С и Python, интерпретатор CPython содержит много внешних\n",
    "функций С и связан с другими языками программирования.\n",
    "CPython можно в какой-то степени считать компилятором, поскольку перед \n",
    "интерпретацией он преобразует код Python в байт-код. В нем используется GIL\n",
    "(глобальная блокировка интерпретатора), которая ограничивает возможности\n",
    "интерпретатора, поскольку она отключает параллельные потоки Python в \n",
    "рамках одного процесса. \n",
    "CPython - единственный вариант использования пакетов Python, которому для\n",
    "правильной работы нужны расширения С. \n",
    "lronPython\n",
    "IronPython - это реализация языка программирования Python для платформы .NET,\n",
    "в которой используются библиотеки Python и .NET. Этот интерпретатор может\n",
    "предоставлять код Python другим языкам, относящимся к платформе .NET.\n",
    "(Поддержка - до Python 2. 7)\n",
    "В IronPython есть поддержка динамической компиляции и встроенная интерактив\n",
    "ная консоль. Использование интерпретатора Python позволяет скриптам Python\n",
    "взаимодействовать с объектами .NET. IronPython напрямую интегрируется в среду\n",
    "разработки Visual Studio.\n",
    "Jython\n",
    "Ранее известная как JPython, реализация Jython работает на платформе Java.\n",
    "Это сочетание Java и Python преобразует код Python в байт-код Java и, \n",
    "следовательно, позволяет запускать код Python на любой машине, на которой\n",
    "установлена JVМ.\n",
    "Jython обеспечивает поддержку как статической, так и динамической компиляции.\n",
    "Важной особенностью этого интерпретатора Python является то, что он позволяет\n",
    "импортировать, а также использовать любые классы Java так, словно это модуль \n",
    "Python.\n",
    "РуРу\n",
    "РуРу - это быстрая и совместимая альтернативная реализация языка программирования\n",
    "Python. Этот интерпретатор Python реализован в RPython, который представляет\n",
    "собой ограниченное статически типизированное подмножество языка программирования\n",
    "Python. Благодаря ЛТ-компилятору РуРу поддерживает серверные части С, CLI и JVM.\n",
    "Основная цель РуРу - обеспечить максимальную совместимость с эталонной \n",
    "реализацией CPython и в то же время увеличить производительность.\n",
    "РуРу используется разработчиками Python, которые хотят увеличить \n",
    "производительность некоторых видов кода Python. \n",
    "PythonNet\n",
    "PythonNet позволяет выполнить почти бесшовную интеграцию Python с .NET CLR.\n",
    "Подход этого интерпретатора можно считать противоположным тому, которому \n",
    "следует lronPython. При использовании вместе с Mono, PythonNet позволяет \n",
    "встроенным в операционные системы установкам Python (кроме Windows) работать \n",
    "в среде .NET. PythonNet можно использовать совместно с IronPython без\n",
    "каких-либо проблем.\n",
    "Stackless Python\n",
    "CPython и другие популярные интерпретаторы Python для управления стеком используют \n",
    "язык С. Но к интерпретатору Stackless Python это не относится. Хотя в Stackless\n",
    "Python используется стек С, между вызовами функций он очищается. Следовательно,\n",
    "интерпретатор Python в работе со стеком не зависит от вызова С. Как и CPython,\n",
    "Stackless Python написан с использованием С и Python. Помимо поддержки потоков,\n",
    "у Stackless Python есть поддержка каналов связи, сопрограмм, предварительно \n",
    "скомпилированных двоичных файлов, циклического планирования, сериализации задач\n",
    "и тасклетов.\n",
    "Возможно, самая важная особенность Stackless Python - это наличие микропотоков.\n",
    "Эта возможность помогает избежать значительной части накладных: расходов,\n",
    "связанных с обычными потоками операционной системы.\n",
    "4.6. Объектная ориентированность\n",
    "Python поддерживает процедурно-ориентированное программирование, а также\n",
    "объектно-ориентированное программирование. В процедурно-ориентированных:\n",
    "языках программа состоит из процедур или функций, в которых заключены \n",
    "многократно используемые части программы. В объектно-ориентированных языках \n",
    "программа построена на объектах, которые включают в себе данные и \n",
    "функциональность. \n",
    "4.7. Расширяемость \n",
    "Если в коде есть критический фрагмент, от которого зависит быстродействие, или\n",
    "вы хотите, чтобы какой-то фрагмент алгоритма был скрыт, вы можете написать эту\n",
    "часть программы на С или С++, а затем использовать ее из программы на Python.\n",
    "Python легко расширяется с помощью кода C/C++/Java и легко встраивается в \n",
    "приложения.\n",
    "4.8. Встраиваемость\n",
    "Код Python можно встраивать в программы на С/С++, что позволяет использовать\n",
    "возможности скриптов.\n",
    "4.9. Внушительные библиотеки\n",
    "Стандартная библиотека Python, которую обычно упоминают как одну из сильнейших\n",
    "сторон этого языка, содержит инструменты, подходящие для огромного множества\n",
    "задач. Для написания приложений, которым требуется выход в Интернет, есть \n",
    "многие стандартные форматы и протоколы, такие как МIМЕ и НТТР. Здесь же\n",
    "вы найдете модули для создания графических пользовательских интерфейсов, \n",
    "подключения к реляционным базам данных, генерации случайных чисел, работы с \n",
    "десятичными дробями произвольной точности, работы с регулярными выражениями\n",
    "и модульного тестирования.\n",
    "♦ графические пользовательские интерфейсы;\n",
    "♦ веб-фреймворки;\n",
    "♦ мультимедиа;\n",
    "♦ базы данных;\n",
    "♦ сети;\n",
    "♦ фреймворки тестирования;\n",
    "♦ автоматизация;\n",
    "♦ парсинг веб-страниц;\n",
    "♦ документация;\n",
    "♦ системное администрирование;\n",
    "♦ научные вычисления;\n",
    "♦ обработка текста;\n",
    "♦ обработка изображений\n",
    "5. Дистрибутив Anaconda\n",
    "Дистрибутив Anaconda - это самый простой и наиболее часто используемый \n",
    "способ установки Python и других необходимых пакетов. Он находится в \n",
    "свободном доступе и прост в установке. Дистрибутив Anaconda с открытым \n",
    "исходным кодом - это самый простой способ выполнять анализ данных с помощью\n",
    "языков Python/R и машинное обучение в Linux, Windows и MacOS, что позволяет\n",
    "специалистам по данным:\n",
    "♦ быстро загрузить более 1 500 пакетов Python/R, предназначенных для задач \n",
    "анализа данных;\n",
    "♦ управлять библиотеками, зависимостями и средами с помощью Conda;\n",
    "♦ разрабатывать и обучать модели машинного обучения и глубокого обучения\n",
    "с помощью пакетов Scikit-leam, TensorF\\ow и Theano;\n",
    "♦ выполнять эффективный и масштабируемый анализ данных с помощью Dask,\n",
    "NumPy, Pandas и Numba;\n",
    "♦ визуализировать результаты с помощью Matplotlib, Bokeh, Datashader и Holo\n",
    "views.\n",
    "5.1. Консоль IPython Qt\n",
    "Консоль Qt - это очень легкое приложение, во многом похожее на командную\n",
    "строку, но с дополнительными функциями, которые можно реализовать только\n",
    "в графическом интерфейсе.\n",
    "Консоль IPython позволяет выполнять команды, а также вводить, \n",
    "взаимодействовать и визуализировать данные через любое количество полноценных\n",
    "интерпретаторов I Python. Каждая консоль выполняется в отдельном процессе,\n",
    "что позволяет запускать скрипты, прерывать выполнение и перезапускать или\n",
    "завершать сессию, не затрагивая другие консоли, и легко тестировать свой\n",
    "код в чистой среде, не прерывая основного сеанса.\n",
    "5.2. Spyder IDE\n",
    "Spyder - это мощная научная среда, написанная на Python для Python, \n",
    "разработанная учеными, инженерами и аналитиками данных для своих нужд. Эта\n",
    "среда отличается уникальным сочетанием функций редактирования, анализа, \n",
    "отладки и профилирования, присущих сложным инструментам разработки, и \n",
    "функций исследования данных, интерактивного выполнения, глубокой проверки и \n",
    "фантастическими возможностями визуализации, присущих научному программному\n",
    "обеспечению. Кроме того, в Spyder имеется встроенная интеграция со многими\n",
    "популярными · научными пакетами, такими как NumPy, SciPy, Pandas, Matplotlib,\n",
    "SymPy и др.\n",
    "5.3. Jupyter Notebook\n",
    "Этот редактор расширяет консольный подход к интерактивным вычислениям в \n",
    "качественно новом направлении и сконструирован как веб-приложение, подходящее\n",
    "для разработки, документирования и выполнения кода, а также передачи\n",
    "результатов. Jupyter Notebook объединяет в себе два компонента:\n",
    "♦ веб-приложение - инструмент на основе браузера, предназначенный для \n",
    "интерактивного создания документов, сочетающий в себе пояснительный текст,\n",
    "математические вычисления и мультимедийный вывод результатов. Jupyter Notebook\n",
    "позволяет работать с кодом в редакторе, встроенном в окно браузера, с \n",
    "автоматическим выделением синтаксиса цветом, отступами, заполнением\n",
    "табуляцией и анализом. Можно запустить код Python из браузера и получить при\n",
    "крепленные к коду результаты вычислений. ;\n",
    "♦ документы Notebook, содержащие все видимое в веб-браузере, включая входные\n",
    "и выходные данные вычислений, пояснительный текст, математические данные,\n",
    "изображения и мультимедийные представления объектов. Документы Notebook\n",
    "содержат входные и выходные данные интерактивного сеанса, а также\n",
    "дополнительный текст, который добавлен к коду, но не предназначен для\n",
    "выполнения. \n",
    "5.3.1. Запуск сервера Notebook\n",
    "Вы можете запустить сервер Notebook из командной строки, используя следующую\n",
    "команду:\n",
    "Jupyter notebook\n",
    "В консоли появится некоторая информация о сервере, после чего в веб-браузере\n",
    "откроется URL-адрес веб-приложения (по умолчанию http://127.0.0.1:8888).\n",
    "Кроме того, вы можете открыть Jupyter Notebook из окна Anaconda Navigator.\n",
    "Главная страница веб-приложения Jupyter Notebook представляет собой дашборд,\n",
    "на котором отображаются созданные документы из вашего каталога (по умолчанию\n",
    "отображается рабочая папка, из которой был запущен сервер Notebook).\n",
    "При запуске сервера Notebook из командной строки вы также можете напрямую\n",
    "открыть конкретный документ, минуя дашборд, с помощью команды:\n",
    "Jupyter notebook my_notebook. ipynЬ\n",
    "Новый документ можно создать либо на панели управления, либо с помощью пункта\n",
    "меню File/New. Каждому открытом документу соответствует один интерактивный сеанс,\n",
    "подключенный к ядру, которое будет выполнять пользовательский код и возвращать \n",
    "результаты.\n",
    "Документ состоит из:\n",
    "Имя документа. Название, отображаемое вверху страницы рядом с логотипом\n",
    "Jupyter, - это имя файла ipynb. При нажатии на имя документа открывается\n",
    "диалоговое окно, позволяющее переименовать его. \n",
    "♦ Панель меню. В меню есть различные операции, которые можно использовать\n",
    "цля работы с документом.\n",
    "♦ Панель инструментов. На панель инструментов в виде иконок выведены самые\n",
    "распространенные операции над документом.\n",
    "♦ Ячейка кода. Это тип ячейки по умолчанию. \n",
    "Документ состоит из последовательности ячеек. Ячейка представляет собой много\n",
    "строчное текстовое поле ввода, содержимое которого можно выполнить либо с по\n",
    "мощью комбинации клавиш <Shift>+<Enter>, либо путем нажатия кнопки Play на\n",
    "панели инструментов, либо с помощью пункта меню Cell l Run. Поведение ячейки\n",
    "при ее выполнении зависит от типа ячейки. Всего существуют три типа ячеек:\n",
    "ячейки кода, ячейки разметки Markdown и ячейки без формата. Каждая ячейка по\n",
    "умолчанию является ячейкой кода, но ее тип можно изменить с помощью выпадающего\n",
    "списка на панели инструментов (изначально тип будет Code) или с помощью горячих\n",
    "клавиш:\n",
    "<Shift>+<Enter> - выполнить код в ячейке\n",
    "<Esc> - командный режим\n",
    "<Enter> - режим редактирования\n",
    "<Н> (в командном режиме) - получение списка всех доступных сочетаний клавиш.\n",
    "Одно из ключевых преимуществ документа Jupyter Notebook - возможность отображать\n",
    "графики, сгенерированные в результате выполнения ячеек кода. Ядро IPython \n",
    "специально спроектировано для бесшовной работы с библиотекой построения графиков\n",
    "Matplotlib, за счет которой и реализована эта функциональность. Интеграция\n",
    "библиотеки построения графиков - это особенность ядра.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"\"\"introduction to python.\"\"\"\n",
    "1. Что такое Python?\n",
    "\n",
    "Python - это бесплатный интерпретируемый высокоуровневый язык\n",
    "программирования общего назначения с открытым исходным кодом.\n",
    "Python был создан Гвидо ван Россумом и впервые выпущен в 1991 r. \n",
    "Он поддерживает несколько парадигм программирования, включая структурное \n",
    "(особенно процедурное) объектно-ориентированное и функциональное программирование.\n",
    "Его языковые конструкции и объектно-ориентированный подход позволяют \n",
    "программистам писать понятный и логичный код в рамках как небольших, так и крупно\n",
    "масштабных проектов.\n",
    "Python - это простой в освоении и очень мощный язык программирования. \n",
    "Элегантный синтаксис и динамическая типизация Python вместе с его\n",
    "интерпретируемостью делают его идеальным языком для написания сценариев и\n",
    "быстрой разработки приложений во многих областях и на множестве платформ.\n",
    "\n",
    "Самыми популярными языками программирования\n",
    "для специалистов по данным являются:\n",
    "1. Python \n",
    "2. С++\n",
    "3. R \n",
    "4. Java\n",
    "5. SQL \n",
    "6. Matlab\n",
    "Преимущества Python:\n",
    "♦ Это один из самых популярных языков программирования, прочно вошедший\n",
    "в индустрию разработки программного обеспечения.\n",
    "♦ Занимает первое место среди языков-аналогов согласно рейтингам из открытых\n",
    "источников или статей по языкам программирования.\n",
    "♦ Стабильно популярный, а еще лучше с растущей популярностью.\n",
    "♦ У языка есть большой набор библиотек, инструменты, фреймворки и большое\n",
    "сообщество, которое вносит свой вклад в развитие языка.\n",
    "♦ Язык хорошо востребован на рынке труда и позволяет получать хорошую зар-\n",
    "плату.\n",
    "Кроме того, Python гибок в настройке и может быть расширен\n",
    "на другие платформы. В автономном виде это довольно мощный язык для решения\n",
    "множества задач. У Python открытый исходный код, и он широко используется.\n",
    "Модули и библиотеки находятся в свободном доступе, и их число растет с каждым\n",
    "днем.\n",
    "Python также очень хорошо приспособлен для решения задач интеллектуального\n",
    "анализа данных, аналитики данных и машинного обучения. Возможности языка\n",
    "программирования в сочетании с модулями анализа данных делают его мощным\n",
    "оружием в арсенале любого аналитика.\n",
    "\n",
    "2. Появление Python\n",
    "Язык Python был придуман в конце 1980-х rr. Гвидо ван Россумом, сотрудником\n",
    "Centrum Wiskunde & Infonnatica (CWI) в Нидерландах, как преемник языка АВС.\n",
    "Его реализация началась в декабре 1989 г. Ван Россум был ведущим разработчиком\n",
    "Python до 1 2 июля 20 1 8 г., после чего ушел в «отпуск на неопределенный срок» и\n",
    "16 октября 2000 r. был выпущен Python 2.0, в котором появилось множество новых\n",
    "базовых функций, включая сборщик мусора с обнаружением циклических ссылок и\n",
    "поддержку Unicode.\n",
    "3 декабря 2008 r. был выпущен Python 3 .0. Это была сильно измененная версия\n",
    "языка, не имеющая полной обратной совместимости. \n",
    "Кстати, язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»\n",
    "(Monty Python's Flying Circus) и со змеями никак не связан. Ссылки на скетчи \n",
    "Монти Пайтона в документации не только разрешены, но и приветствуются! \n",
    "\n",
    "3. Python и другие языки программирования\n",
    "Python проще в использовании, доступен в операционных системах Windows, MacOS и\n",
    "UNIX и позволяет выполнить работу быстрее.\n",
    "Python прост в использовании, но при этом это настоящий язык программирования,\n",
    "в котором есть гораздо более мощный инструментарий для создания больших программ, \n",
    "чем могут предложить shell-скрипты или Ьаt-файлы. С другой стороны, \n",
    "в Python также реализовано больше проверок ошибок, чем в С, и, как в любом языке\n",
    "высокого уровня, в нем есть встроенные высокоуровневые типы данных, такие как \n",
    "гибкие массивы и словари. \n",
    "Python позволяет разделять программу на модули, которые можно повторно\n",
    "использовать в других программах на Python. В нем есть большой встроенный набор\n",
    "стандартных модулей, которые можно использовать в качестве основы для своих\n",
    "программ или в качестве примеров для начала обучения программированию на\n",
    "Python. В этих модулях реализован файловый ввод-вывод, системные вызовы, сокеты,\n",
    "а также инструменты для создания графических пользовательских интерфейсов,\n",
    "такие как Tkinter.\n",
    "Python - это интерпретируемый язык, позволяющий значительно сэкономить время.\n",
    "Интерпретатор можно использовать в интерактивном режиме, что позволяет легко\n",
    "экспериментировать с функциями языка, писать одноразовые программы или\n",
    "тестировать функции во время нисходящей разработки программы.\n",
    "А еще это удобный настольный калькулятор.\n",
    "Python позволяет писать программы компактно и читабельно. Программы, написанные \n",
    "на Python, обычно намного короче таких же программ на С, С++ или Java\n",
    "по нескольким причинам.\n",
    "♦ Типы данных высокого уровня позволяют записывать сложные операции в одну\n",
    "строку.\n",
    "♦ Группировка операторов выполняется с помощью отступов, а не с помощью\n",
    "скобок в начале и конце блока.\n",
    "♦ Объявление переменных или аргументов не требуется.\n",
    "Python является расширяемым: если вы знаете язык С, то можете добавить в \n",
    "интерпретатор новую встроенную функцию или модуль, который бы выполнял важные\n",
    "с точки зрения производительности части кода с максимальной скоростью или\n",
    "связывал программы на Python с библиотеками, доступными в двоичной форме\n",
    "(например, графическими библиотеками конкретного производителя). После \n",
    "подключения вы можете связать интерпретатор Python с приложением, написанным на\n",
    "С, и использовать его как расширение или командный язык для этого приложения.\n",
    "\n",
    "Основная философия языка кратко изложена в документе Zen of Python1 , в котором\n",
    "можно найти такие афоризмы, как:\n",
    "♦ Красивое лучше, чем уродливое.\n",
    "♦ Явное лучше, чем неявное.\n",
    "♦ Простое лучше, чем сложное.\n",
    "♦ Сложное лучше, чем запутанное.\n",
    "♦ Читаемость имеет значение.\n",
    "\n",
    "4. Преимущества Python по сравнению с другими языками\n",
    "4.1 . Простота\n",
    "Python по простоте напоминает «дисциплинированный английский». То есть это не\n",
    "какой-то чужеродный язык, который нормальный человек не может понять. Но в то\n",
    "же время для его применения требуется некоторая дисциплина. Чтение кода на\n",
    "Python похоже на чтение на английском. Простота - одна из основных сильных\n",
    "сторон Python. Это позволяет нам больше сосредоточиться на решении, а не на\n",
    "синтаксисе языка программирования. \n",
    "4.2. Свободный и открытый исходный код\n",
    "Python распространяется бесплатно. Как мы увидим в процессе загрузки и \n",
    "установки Python, все делается совершенно бесплатно. И не будет никаких скрытых \n",
    "платежей за использование или распространение вашей работы.\n",
    "Python распространяется по модели FLOSS (Free/Libre and Open Source Software).\n",
    "Проще говоря, вы можете открыто распространять дубликаты этого продукта, читать\n",
    "его исходный код, вносить в него изменения и использовать его в бесплатных\n",
    "проектах. Есть целое сообщество FLOSS, которое взаимодействует между собой и\n",
    "обменивается информацией. Это одна из причин, почему Python нам подходит, -\n",
    "этот язык был создан и постоянно совершенствуется сообществом, которое желает\n",
    "сделать его как можно лучше.\n",
    "4.3. Высокоуровневость\n",
    "Язык программирования высокого уровня - это язык, в котором вам не приходится\n",
    "думать о множестве деталей, которые нужны при использовании языка \n",
    "программирования низкого уровня. Например, в Python не приходится беспокоиться\n",
    "об управлении памятью, используемой вашей программой. Проще говоря, языки\n",
    "низкого уровня ближе к аппаратному обеспечению, чем языки программирования\n",
    "высокого уровня, которые ближе к человеческим языкам.\n",
    "4.4. Портативность\n",
    "Портативность означает, что Python можно использовать на разных типах машин,\n",
    "независимо от аппаратных средств или ограничений операционной системы. \n",
    "Благодаря открытому исходному коду Python был перенесен на многие платформы,\n",
    "и его можно использовать в Windows, GNU/Linux, Macintosh, Solaris, Palm OS,\n",
    "PlayStation, Sharp Zaurus, Windows СЕ и PocketPC !\n",
    "4.5. Интерпретируемость\n",
    "Когда вы пишете программу на языке С или С++, она преобразуется из исходного\n",
    "языка, т. е. из кода на С или С++, в машинный код (состоящий из О и 1 ), \n",
    "потому что именно такой язык понимает компьютер. Этот процесс выполняется \n",
    "с помощью компилятора. Когда программа запускается, программное обеспечение\n",
    "компоновщика копирует программу в память и запускает ее.\n",
    "Python не требует компиляции в двоичный код, а ваша программа запускается \n",
    "прямо из исходного кода. Внутри Python преобразует исходный код в\n",
    "промежуточную форму, называемую байт-кодами, затем переводит ее на родной\n",
    "язык компьютера и запускает.\n",
    "Python - это самый быстроразвивающийся язык программирования в 2020 году,\n",
    "поэтому недостатка в интерпретаторах у него нет. \n",
    "4.5.1. Интерпретаторы Python \n",
    "Что такое интерпретатор?\n",
    "По определению интерпретатор - это разновидность компьютерной программы,\n",
    "которая непосредственно выполняет инструкции, написанные на каком-либо языке\n",
    "программирования или языке сценариев. Под непосредственным выполнением\n",
    "подразумевается, что предварительная компиляция кода в программу на машинном\n",
    "языке не требуется.\n",
    "Когда вы устанавливаете Python, с ним также устанавливается интерпретатор\n",
    "по умолчанию. Вы можете запустить интерпретатор по умолчанию, набрав команду \n",
    "python в командной строке вашего компьютера. После загрузки интерпретатора\n",
    "код на Python можно выполнять в командной строке. Этот интерпретатор \n",
    "используется по умолчанию, но у него есть свои ограничения. Например, в \n",
    "нем нет отступов, выделения синтаксиса цветом, дополнения табуляции и\n",
    "многого другого, что есть в других интерпретаторах.\n",
    "IPython - это альтернативный интерпретатор Python. Это интерактивная оболочка,\n",
    "которая используется для вычислений на Python. В ней гораздо больше полезных\n",
    "функций по сравнению с интерпретатором Python, используемым по умолчанию.\n",
    "В комплекте с IPython идет редактор Jupyter Notebook - один из наиболее часто\n",
    "используемых начинающими программистами инструментов.\n",
    "CPython\n",
    "Это стандартная и наиболее широко используемая реализация языка программирования\n",
    "Python. Написанный на С и Python, интерпретатор CPython содержит много внешних\n",
    "функций С и связан с другими языками программирования.\n",
    "CPython можно в какой-то степени считать компилятором, поскольку перед \n",
    "интерпретацией он преобразует код Python в байт-код. В нем используется GIL\n",
    "(глобальная блокировка интерпретатора), которая ограничивает возможности\n",
    "интерпретатора, поскольку она отключает параллельные потоки Python в \n",
    "рамках одного процесса. \n",
    "CPython - единственный вариант использования пакетов Python, которому для\n",
    "правильной работы нужны расширения С. \n",
    "lronPython\n",
    "IronPython - это реализация языка программирования Python для платформы .NET,\n",
    "в которой используются библиотеки Python и .NET. Этот интерпретатор может\n",
    "предоставлять код Python другим языкам, относящимся к платформе .NET.\n",
    "(Поддержка - до Python 2. 7)\n",
    "В IronPython есть поддержка динамической компиляции и встроенная интерактив\n",
    "ная консоль. Использование интерпретатора Python позволяет скриптам Python\n",
    "взаимодействовать с объектами .NET. IronPython напрямую интегрируется в среду\n",
    "разработки Visual Studio.\n",
    "Jython\n",
    "Ранее известная как JPython, реализация Jython работает на платформе Java.\n",
    "Это сочетание Java и Python преобразует код Python в байт-код Java и, \n",
    "следовательно, позволяет запускать код Python на любой машине, на которой\n",
    "установлена JVМ.\n",
    "Jython обеспечивает поддержку как статической, так и динамической компиляции.\n",
    "Важной особенностью этого интерпретатора Python является то, что он позволяет\n",
    "импортировать, а также использовать любые классы Java так, словно это модуль \n",
    "Python.\n",
    "РуРу\n",
    "РуРу - это быстрая и совместимая альтернативная реализация языка программирования\n",
    "Python. Этот интерпретатор Python реализован в RPython, который представляет\n",
    "собой ограниченное статически типизированное подмножество языка программирования\n",
    "Python. Благодаря ЛТ-компилятору РуРу поддерживает серверные части С, CLI и JVM.\n",
    "Основная цель РуРу - обеспечить максимальную совместимость с эталонной \n",
    "реализацией CPython и в то же время увеличить производительность.\n",
    "РуРу используется разработчиками Python, которые хотят увеличить \n",
    "производительность некоторых видов кода Python. \n",
    "PythonNet\n",
    "PythonNet позволяет выполнить почти бесшовную интеграцию Python с .NET CLR.\n",
    "Подход этого интерпретатора можно считать противоположным тому, которому \n",
    "следует lronPython. При использовании вместе с Mono, PythonNet позволяет \n",
    "встроенным в операционные системы установкам Python (кроме Windows) работать \n",
    "в среде .NET. PythonNet можно использовать совместно с IronPython без\n",
    "каких-либо проблем.\n",
    "Stackless Python\n",
    "CPython и другие популярные интерпретаторы Python для управления стеком используют \n",
    "язык С. Но к интерпретатору Stackless Python это не относится. Хотя в Stackless\n",
    "Python используется стек С, между вызовами функций он очищается. Следовательно,\n",
    "интерпретатор Python в работе со стеком не зависит от вызова С. Как и CPython,\n",
    "Stackless Python написан с использованием С и Python. Помимо поддержки потоков,\n",
    "у Stackless Python есть поддержка каналов связи, сопрограмм, предварительно \n",
    "скомпилированных двоичных файлов, циклического планирования, сериализации задач\n",
    "и тасклетов.\n",
    "Возможно, самая важная особенность Stackless Python - это наличие микропотоков.\n",
    "Эта возможность помогает избежать значительной части накладных: расходов,\n",
    "связанных с обычными потоками операционной системы.\n",
    "4.6. Объектная ориентированность\n",
    "Python поддерживает процедурно-ориентированное программирование, а также\n",
    "объектно-ориентированное программирование. В процедурно-ориентированных:\n",
    "языках программа состоит из процедур или функций, в которых заключены \n",
    "многократно используемые части программы. В объектно-ориентированных языках \n",
    "программа построена на объектах, которые включают в себе данные и \n",
    "функциональность. \n",
    "4.7. Расширяемость \n",
    "Если в коде есть критический фрагмент, от которого зависит быстродействие, или\n",
    "вы хотите, чтобы какой-то фрагмент алгоритма был скрыт, вы можете написать эту\n",
    "часть программы на С или С++, а затем использовать ее из программы на Python.\n",
    "Python легко расширяется с помощью кода C/C++/Java и легко встраивается в \n",
    "приложения.\n",
    "4.8. Встраиваемость\n",
    "Код Python можно встраивать в программы на С/С++, что позволяет использовать\n",
    "возможности скриптов.\n",
    "4.9. Внушительные библиотеки\n",
    "Стандартная библиотека Python, которую обычно упоминают как одну из сильнейших\n",
    "сторон этого языка, содержит инструменты, подходящие для огромного множества\n",
    "задач. Для написания приложений, которым требуется выход в Интернет, есть \n",
    "многие стандартные форматы и протоколы, такие как МIМЕ и НТТР. Здесь же\n",
    "вы найдете модули для создания графических пользовательских интерфейсов, \n",
    "подключения к реляционным базам данных, генерации случайных чисел, работы с \n",
    "десятичными дробями произвольной точности, работы с регулярными выражениями\n",
    "и модульного тестирования.\n",
    "♦ графические пользовательские интерфейсы;\n",
    "♦ веб-фреймворки;\n",
    "♦ мультимедиа;\n",
    "♦ базы данных;\n",
    "♦ сети;\n",
    "♦ фреймворки тестирования;\n",
    "♦ автоматизация;\n",
    "♦ парсинг веб-страниц;\n",
    "♦ документация;\n",
    "♦ системное администрирование;\n",
    "♦ научные вычисления;\n",
    "♦ обработка текста;\n",
    "♦ обработка изображений\n",
    "5. Дистрибутив Anaconda\n",
    "Дистрибутив Anaconda - это самый простой и наиболее часто используемый \n",
    "способ установки Python и других необходимых пакетов. Он находится в \n",
    "свободном доступе и прост в установке. Дистрибутив Anaconda с открытым \n",
    "исходным кодом - это самый простой способ выполнять анализ данных с помощью\n",
    "языков Python/R и машинное обучение в Linux, Windows и MacOS, что позволяет\n",
    "специалистам по данным:\n",
    "♦ быстро загрузить более 1 500 пакетов Python/R, предназначенных для задач \n",
    "анализа данных;\n",
    "♦ управлять библиотеками, зависимостями и средами с помощью Conda;\n",
    "♦ разрабатывать и обучать модели машинного обучения и глубокого обучения\n",
    "с помощью пакетов Scikit-leam, TensorF\\ow и Theano;\n",
    "♦ выполнять эффективный и масштабируемый анализ данных с помощью Dask,\n",
    "NumPy, Pandas и Numba;\n",
    "♦ визуализировать результаты с помощью Matplotlib, Bokeh, Datashader и Holo\n",
    "views.\n",
    "5.1. Консоль IPython Qt\n",
    "Консоль Qt - это очень легкое приложение, во многом похожее на командную\n",
    "строку, но с дополнительными функциями, которые можно реализовать только\n",
    "в графическом интерфейсе.\n",
    "Консоль IPython позволяет выполнять команды, а также вводить, \n",
    "взаимодействовать и визуализировать данные через любое количество полноценных\n",
    "интерпретаторов I Python. Каждая консоль выполняется в отдельном процессе,\n",
    "что позволяет запускать скрипты, прерывать выполнение и перезапускать или\n",
    "завершать сессию, не затрагивая другие консоли, и легко тестировать свой\n",
    "код в чистой среде, не прерывая основного сеанса.\n",
    "5.2. Spyder IDE\n",
    "Spyder - это мощная научная среда, написанная на Python для Python, \n",
    "разработанная учеными, инженерами и аналитиками данных для своих нужд. Эта\n",
    "среда отличается уникальным сочетанием функций редактирования, анализа, \n",
    "отладки и профилирования, присущих сложным инструментам разработки, и \n",
    "функций исследования данных, интерактивного выполнения, глубокой проверки и \n",
    "фантастическими возможностями визуализации, присущих научному программному\n",
    "обеспечению. Кроме того, в Spyder имеется встроенная интеграция со многими\n",
    "популярными · научными пакетами, такими как NumPy, SciPy, Pandas, Matplotlib,\n",
    "SymPy и др.\n",
    "5.3. Jupyter Notebook\n",
    "Этот редактор расширяет консольный подход к интерактивным вычислениям в \n",
    "качественно новом направлении и сконструирован как веб-приложение, подходящее\n",
    "для разработки, документирования и выполнения кода, а также передачи\n",
    "результатов. Jupyter Notebook объединяет в себе два компонента:\n",
    "♦ веб-приложение - инструмент на основе браузера, предназначенный для \n",
    "интерактивного создания документов, сочетающий в себе пояснительный текст,\n",
    "математические вычисления и мультимедийный вывод результатов. Jupyter Notebook\n",
    "позволяет работать с кодом в редакторе, встроенном в окно браузера, с \n",
    "автоматическим выделением синтаксиса цветом, отступами, заполнением\n",
    "табуляцией и анализом. Можно запустить код Python из браузера и получить при\n",
    "крепленные к коду результаты вычислений. ;\n",
    "♦ документы Notebook, содержащие все видимое в веб-браузере, включая входные\n",
    "и выходные данные вычислений, пояснительный текст, математические данные,\n",
    "изображения и мультимедийные представления объектов. Документы Notebook\n",
    "содержат входные и выходные данные интерактивного сеанса, а также\n",
    "дополнительный текст, который добавлен к коду, но не предназначен для\n",
    "выполнения. \n",
    "5.3.1. Запуск сервера Notebook\n",
    "Вы можете запустить сервер Notebook из командной строки, используя следующую\n",
    "команду:\n",
    "Jupyter notebook\n",
    "В консоли появится некоторая информация о сервере, после чего в веб-браузере\n",
    "откроется URL-адрес веб-приложения (по умолчанию http://127.0.0.1:8888).\n",
    "Кроме того, вы можете открыть Jupyter Notebook из окна Anaconda Navigator.\n",
    "Главная страница веб-приложения Jupyter Notebook представляет собой дашборд,\n",
    "на котором отображаются созданные документы из вашего каталога (по умолчанию\n",
    "отображается рабочая папка, из которой был запущен сервер Notebook).\n",
    "При запуске сервера Notebook из командной строки вы также можете напрямую\n",
    "открыть конкретный документ, минуя дашборд, с помощью команды:\n",
    "Jupyter notebook my_notebook. ipynЬ\n",
    "Новый документ можно создать либо на панели управления, либо с помощью пункта\n",
    "меню File/New. Каждому открытом документу соответствует один интерактивный сеанс,\n",
    "подключенный к ядру, которое будет выполнять пользовательский код и возвращать \n",
    "результаты.\n",
    "Документ состоит из:\n",
    "Имя документа. Название, отображаемое вверху страницы рядом с логотипом\n",
    "Jupyter, - это имя файла ipynb. При нажатии на имя документа открывается\n",
    "диалоговое окно, позволяющее переименовать его. \n",
    "♦ Панель меню. В меню есть различные операции, которые можно использовать\n",
    "цля работы с документом.\n",
    "♦ Панель инструментов. На панель инструментов в виде иконок выведены самые\n",
    "распространенные операции над документом.\n",
    "♦ Ячейка кода. Это тип ячейки по умолчанию. \n",
    "Документ состоит из последовательности ячеек. Ячейка представляет собой много\n",
    "строчное текстовое поле ввода, содержимое которого можно выполнить либо с по\n",
    "мощью комбинации клавиш <Shift>+<Enter>, либо путем нажатия кнопки Play на\n",
    "панели инструментов, либо с помощью пункта меню Cell l Run. Поведение ячейки\n",
    "при ее выполнении зависит от типа ячейки. Всего существуют три типа ячеек:\n",
    "ячейки кода, ячейки разметки Markdown и ячейки без формата. Каждая ячейка по\n",
    "умолчанию является ячейкой кода, но ее тип можно изменить с помощью выпадающего\n",
    "списка на панели инструментов (изначально тип будет Code) или с помощью горячих\n",
    "клавиш:\n",
    "<Shift>+<Enter> - выполнить код в ячейке\n",
    "<Esc> - командный режим\n",
    "<Enter> - режим редактирования\n",
    "<Н> (в командном режиме) - получение списка всех доступных сочетаний клавиш.\n",
    "Одно из ключевых преимуществ документа Jupyter Notebook - возможность отображать\n",
    "графики, сгенерированные в результате выполнения ячеек кода. Ядро IPython \n",
    "специально спроектировано для бесшовной работы с библиотекой построения графиков\n",
    "Matplotlib, за счет которой и реализована эта функциональность. Интеграция\n",
    "библиотеки построения графиков - это особенность ядра.\n",
    "\n",
    "Ответьте на вопросы: \n",
    "1.  Python - это программное обеспечение с открытым исходным кодом. Это то\n",
    "же самое, что и бесплатное ПО?\n",
    "Ответ:\n",
    "Да, Python - это бесплатное ПО.\n",
    "2. У всех ли бесплатных программ открытый исходный код? А если нет, то в чем\n",
    "разница?\n",
    "Ответ:\n",
    "Далеко не у всех бесплатных программ открытый исходный код. Существуют программы\n",
    "с закрытым кодом, как правило, это означает, что распространяются только бинарные\n",
    "(откомпилированные) версии программы, и лицензия подразумевает отсутствие\n",
    "доступа к исходному коду программы.\n",
    "3 . Python поддерживает динамическую типизацию. Что это такое?\n",
    "Ответ:\n",
    "Динамическая типизация означает возможность после объявления переменной, поменять\n",
    "не только ее значение, но и тип данных. \n",
    "4. Назовите 5 самых популярных языков программирования для специалистов по\n",
    "анализу данных?\n",
    "Ответ:\n",
    "1. Python \n",
    "2. С++\n",
    "3. R \n",
    "4. Java\n",
    "5. SQL \n",
    "5 . В чем заключается преимущество Python по сравнению с языком С?\n",
    "Ответ:\n",
    "Python проще в использовании, доступен в операционных системах Windows, MacOS и\n",
    "UNIX и позволяет выполнить работу быстрее. В Python также реализовано больше\n",
    "проверок ошибок, чем в С, и, как в любом языке высокого уровня, в нем есть\n",
    "встроенные высокоуровневые типы данных, такие как гибкие массивы и словари.\n",
    "6. Python портативен. Что в этом контексте означает «портативность»?\n",
    "Ответ:\n",
    "Портативность означает, что Python можно использовать на разных типах машин,\n",
    "независимо от аппаратных средств или ограничений операционной системы.\n",
    "7. В чем разница между «расширяемым» и «встраиваемым» языком?\n",
    "Ответ:\n",
    "Расширяемость означает возможность написать часть программы на другом языке \n",
    "и запустить его из программы на Python, а встраиваемость - код Python можно встраивать\n",
    "в программы на других языках.\n",
    "8. В чем смысл IDE? Чем она отличается от командной строки?\n",
    "Ответ:\n",
    "Не смотря на то, что командная строка - это самый эффективный способ запуска на \n",
    "компьютере любого программного обеспечения, IDE значительно удобнее. В ней имеются\n",
    "функции редактирования, интерактивного тестирования, отладки и самоанализа.\n",
    "9. Как открыть существующий документ Jupyter Notebook? Чем эта процедура отличается\n",
    "от открытия РDF-файла или текстового файла?\n",
    "Ответ:\n",
    "Каждому открытом документу соответствует один интерактивный сеанс, подключенный к ядру,\n",
    "которое будет выполнять пользовательский код и возвращать результаты. Это ядро остается \n",
    "активным при закрытии окна браузера, и повторное открытие того же документа с панели\n",
    "управления приведет к повторному подключению веб-приложения к тому же ядру. \n",
    "10. В чем разница между «ячейками разметки Markdown» и «ячейками кода»\n",
    "в Jupyter Notebook? Для чего они нужны?\n",
    "Ответ:\n",
    "Ячейка кода позволяет редактировать и писать новый код с выделением синтаксиса цветом и \n",
    "заполнением табуляцией. Используемый вами язык программирования зависит от ядра, а ядро\n",
    "по умолчанию (IPython) запускает код Python. Язык Markdown - это простой способ выполнить\n",
    "разметку текста и указать, какой текст нужно выделить курсивом, какой жирным шрифтом,\n",
    "где вставить список и т. д. При выполнении ячейки Markdown разметка Markdown преобразуется\n",
    "в соответствующий форматированный текст. Markdown также допускает форматирование\n",
    "с помощью НТМL-кода.\n",
    "\n",
    "1.5.2. Правда или ложь.\n",
    "1. Ложь\n",
    "2. Правда\n",
    "3. Ложь\n",
    "4. Ложь\n",
    "5. Ложь\n",
    "6. Правда\n",
    "7. Ложь\n",
    "8. Правда\n",
    "9. Правда\n",
    "10. Ложь"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
