"""Обработка ошибок и обращение за помощью."""

# Процесс поиска информации состоит из двух этапов:
# 1. Анализа трассировки.
# 2. Поиска текста сообщения об ошибке в интернете.
#
# 1. Анализ трассировки
# Программы Python аварийно завершаются, когда в коде возникает исключение,
# не обработанное командой except. В таком случае Python выдает сообщение об
# исключении и трассировку (также называемую трассировкой стека). Трассировка
# показывает, в какой точке вашей программы произошло исключение и последова-
# тельность вызовов функций, которые к этой точке привели.
# Чтобы потренироваться в чтении трассировки, введите следующую программу
# (она содержит ошибку) и сохраните ее под именем abcTraceback.py. Номера строк
# приведены только для удобства, они не являются частью программы.

# ![image.png](attachment:image.png)

# В этой программе функция a() вызывает b() ❶, которая вызывает функцию c() ❷.
# Внутри c() выражение 42 / 0 ❸ вызывает ошибку деления на нуль. Если вы запу-
# стите эту программу, результат должен выглядеть так:

# ![image.png](attachment:image.png)

# Если взглянуть на строку кода в сводке кадра, становится ясно, что ошибка
# деления на нуль возникла из-за выражения 42 / 0.
# Но рассмотрим более сложный случай.
#

# ![image.png](attachment:image.png)

# При запуске этой программы результат должен выглядеть так:

# ![image.png](attachment:image.png)

# Сообщение об ошибке то же, но деление на нуль в return number1 / (number2 - 42)
# не столь очевидно. По оператору / можно заключить, что выполняется деление,
# а выражение (number2 - 42) должно быть равно 0. Отсюда можно сделать вывод,
# что в функции spam() происходит сбой, когда параметр number2 равен 42.

# Иногда трассировка может сообщить, что ошибка находится в строке, расположен-
# ной после причины ошибки. Например, в следующей программе в первой строке
# отсутствует закрывающая круглая скобка:
#
# print('Hello.'
# print('How are you?')
# Но из сообщения об ошибке для этой программы следует, что проблема находится
# во второй строке:

# ![image.png](attachment:image.png)

# Дело в том, что интерпретатор Python не заметил синтаксическую ошибку до того,
# как была прочитана вторая строка. Трассировка может сообщить, где обнаружена
# проблема, но это место не всегда то самое, где находится реальная причина ошибки.

# 2. Поиск сообщений об ошибках
# Если вы встречаете сообщение об ошибке впервые, скопируйте его в
# поисковую систему. На рис. 1.1 показаны результаты поиска по строке python
# "ZeroDivisionError: division by zero". Заключение сообщения об ошибке в
# кавычки помогает найти точную фразу

# ![image.png](attachment:image.png)

# Для примера рассмотрим следующее сообщение об ошибке:

# ![image.png](attachment:image.png)

# В этом примере допущена опечатка в имени переменной employeRecord, что приво-
# дит к ошибке ❶. Так как идентификатор employeRecord в сообщении NameError: name
# 'employeRecord' is not defined связан с вашим кодом, при поиске стоит использо-
# вать строку python "NameError: name" "is not defined". В последней строке часть
# 'int' and 'str' в сообщении об ошибке ❷ явно относится к значениям 42 и 'hello',
# так что усечение строки поиска до python "TypeError: unsupported operand type(s)
# for" позволит исключить фрагменты, относящиеся к вашему коду. Если поиск не
# даст полезных результатов, попробуйте включить полное сообщение об ошибке.

# Предотвращение ошибок при помощи статического анализатора
# Статические анализаторы (linters) — приложения, которые анализируют исходный
# код и предупреждают вас о потенциальных ошибках. Хотя статический анализатор
# не обнаруживает все ошибки, статический анализ (проверка исходного кода без
# его выполнения) помогает выявить типичные ошибки, возникающие из-за опечаток.
# Многие текстовые редакторы и интегрированные среды разработки (IDE) включают
# статический анализатор, который работает в фоновом режиме и способен выявлять
# проблемы в реальном времени (рис. 1.2).

# ![image.png](attachment:image.png)

# Как обратиться за помощью по программированию
#
# Не спрашивайте, можно ли задать вопрос, а просто задайте его.
# Не обозначайте суть вопроса намеками, формулируйте конкретно.
# Не задавайте вопрос на неподходящем форуме или веб-сайте.
# Не используйте неконкретный заголовок или тему сообщения — например,
# «У меня проблема» или «Помогите, пожалуйста».
# Не пишите «Моя программа не работает», объясните, как она должна работать.
# Не храните в секрете полные сообщения об ошибках.
# Не ленитесь опубликовать ваш код.
# Не приводите плохо отформатированный код.
# Не замалчивайте, что вы уже пытались сделать.
# Не скрывайте информацию об операционной системе или версии.
# Не просите написать программу за вас.
#
# Stack Overflow — популярный веб-сайт для получения ответов на вопросы по
# программированию
# https://reddit.com/r/learnpython/ — это сообщество не так строго относится
# к вопросам.
#
# https://pastebin.com/ или https://gist.github.com/ - сохраняет ваш код
# с коротким общедоступным URL-адресом.
#
# Опишите свою рабочую конфигурацию:
# 1. Операционная система и ее версия
# 2. Версия Python, использованная для запуска программы
# 3. Сторонние модули, использованные в программе, и их версии
# Чтобы узнать номера версий установленных сторонних модулей:

# ![image.png](attachment:image.png)

# Примеры вопросов
# «Selenium Webdriver: как мне найти ВСЕ атрибуты элемента?
# В модуле Python Selenium, если у меня есть объект WebElement, я могу получить
# значение любого из его атрибутов вызовом get_attribute():
# foo = elem.get_attribute('href')
# Если атрибут с именем 'href' не существует, возвращается None.
# Вопрос: как получить список всех атрибутов, имеющихся у элемента? Я не на-
# шел ничего похожего на метод get_attributes() или get_attribute_names().
# Я использую версию 2.44.0 модуля Selenium для Python».
#

# Итоги:
# 1. Сначала необходимо разобрать сообщения об ошибках, выдаваемые Python.
# 2. Статический анализатор способен в реальном времени находить опечатки и потен-
# циальные ошибки в процессе написания кода.
# 3. Попробуйте опубликовать правильно сформулированный вопрос на форуме или задайте
# вопрос эксперту по электронной почте.
